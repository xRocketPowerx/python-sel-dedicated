# coding: utf-8

"""
    Seido User REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.4.8
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NextPriceModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'due_date': 'int',
        'paid_till': 'int',
        'amount_due': 'float',
        'discount': 'int',
        'discount_detail': 'DiscountDetailModel',
        'setup_fee': 'int',
        'plan_price': 'float'
    }

    attribute_map = {
        'due_date': 'due_date',
        'paid_till': 'paid_till',
        'amount_due': 'amount_due',
        'discount': 'discount',
        'discount_detail': 'discount_detail',
        'setup_fee': 'setup_fee',
        'plan_price': 'plan_price'
    }

    def __init__(self, due_date=None, paid_till=None, amount_due=None, discount=None, discount_detail=None, setup_fee=None, plan_price=None):  # noqa: E501
        """NextPriceModel - a model defined in OpenAPI"""  # noqa: E501

        self._due_date = None
        self._paid_till = None
        self._amount_due = None
        self._discount = None
        self._discount_detail = None
        self._setup_fee = None
        self._plan_price = None
        self.discriminator = None

        if due_date is not None:
            self.due_date = due_date
        if paid_till is not None:
            self.paid_till = paid_till
        self.amount_due = amount_due
        self.discount = discount
        self.discount_detail = discount_detail
        self.setup_fee = setup_fee
        if plan_price is not None:
            self.plan_price = plan_price

    @property
    def due_date(self):
        """Gets the due_date of this NextPriceModel.  # noqa: E501


        :return: The due_date of this NextPriceModel.  # noqa: E501
        :rtype: int
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this NextPriceModel.


        :param due_date: The due_date of this NextPriceModel.  # noqa: E501
        :type: int
        """

        self._due_date = due_date

    @property
    def paid_till(self):
        """Gets the paid_till of this NextPriceModel.  # noqa: E501


        :return: The paid_till of this NextPriceModel.  # noqa: E501
        :rtype: int
        """
        return self._paid_till

    @paid_till.setter
    def paid_till(self, paid_till):
        """Sets the paid_till of this NextPriceModel.


        :param paid_till: The paid_till of this NextPriceModel.  # noqa: E501
        :type: int
        """

        self._paid_till = paid_till

    @property
    def amount_due(self):
        """Gets the amount_due of this NextPriceModel.  # noqa: E501


        :return: The amount_due of this NextPriceModel.  # noqa: E501
        :rtype: float
        """
        return self._amount_due

    @amount_due.setter
    def amount_due(self, amount_due):
        """Sets the amount_due of this NextPriceModel.


        :param amount_due: The amount_due of this NextPriceModel.  # noqa: E501
        :type: float
        """
        if amount_due is None:
            raise ValueError("Invalid value for `amount_due`, must not be `None`")  # noqa: E501

        self._amount_due = amount_due

    @property
    def discount(self):
        """Gets the discount of this NextPriceModel.  # noqa: E501


        :return: The discount of this NextPriceModel.  # noqa: E501
        :rtype: int
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this NextPriceModel.


        :param discount: The discount of this NextPriceModel.  # noqa: E501
        :type: int
        """
        if discount is None:
            raise ValueError("Invalid value for `discount`, must not be `None`")  # noqa: E501

        self._discount = discount

    @property
    def discount_detail(self):
        """Gets the discount_detail of this NextPriceModel.  # noqa: E501


        :return: The discount_detail of this NextPriceModel.  # noqa: E501
        :rtype: DiscountDetailModel
        """
        return self._discount_detail

    @discount_detail.setter
    def discount_detail(self, discount_detail):
        """Sets the discount_detail of this NextPriceModel.


        :param discount_detail: The discount_detail of this NextPriceModel.  # noqa: E501
        :type: DiscountDetailModel
        """
        if discount_detail is None:
            raise ValueError("Invalid value for `discount_detail`, must not be `None`")  # noqa: E501

        self._discount_detail = discount_detail

    @property
    def setup_fee(self):
        """Gets the setup_fee of this NextPriceModel.  # noqa: E501


        :return: The setup_fee of this NextPriceModel.  # noqa: E501
        :rtype: int
        """
        return self._setup_fee

    @setup_fee.setter
    def setup_fee(self, setup_fee):
        """Sets the setup_fee of this NextPriceModel.


        :param setup_fee: The setup_fee of this NextPriceModel.  # noqa: E501
        :type: int
        """
        if setup_fee is None:
            raise ValueError("Invalid value for `setup_fee`, must not be `None`")  # noqa: E501

        self._setup_fee = setup_fee

    @property
    def plan_price(self):
        """Gets the plan_price of this NextPriceModel.  # noqa: E501


        :return: The plan_price of this NextPriceModel.  # noqa: E501
        :rtype: float
        """
        return self._plan_price

    @plan_price.setter
    def plan_price(self, plan_price):
        """Sets the plan_price of this NextPriceModel.


        :param plan_price: The plan_price of this NextPriceModel.  # noqa: E501
        :type: float
        """

        self._plan_price = plan_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NextPriceModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
