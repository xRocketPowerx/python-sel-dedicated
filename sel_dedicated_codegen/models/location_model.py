# coding: utf-8

"""
    Seido User REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.4.8
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class LocationModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uuid': 'str',
        'name': 'str',
        'location_id': 'int',
        'description': 'str',
        'dc_count': 'int',
        'enable': 'bool'
    }

    attribute_map = {
        'uuid': 'uuid',
        'name': 'name',
        'location_id': 'location_id',
        'description': 'description',
        'dc_count': 'dc_count',
        'enable': 'enable'
    }

    def __init__(self, uuid=None, name=None, location_id=None, description=None, dc_count=None, enable=None):  # noqa: E501
        """LocationModel - a model defined in OpenAPI"""  # noqa: E501

        self._uuid = None
        self._name = None
        self._location_id = None
        self._description = None
        self._dc_count = None
        self._enable = None
        self.discriminator = None

        self.uuid = uuid
        self.name = name
        self.location_id = location_id
        if description is not None:
            self.description = description
        if dc_count is not None:
            self.dc_count = dc_count
        self.enable = enable

    @property
    def uuid(self):
        """Gets the uuid of this LocationModel.  # noqa: E501


        :return: The uuid of this LocationModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this LocationModel.


        :param uuid: The uuid of this LocationModel.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501
        if uuid is not None and len(uuid) > 36:
            raise ValueError("Invalid value for `uuid`, length must be less than or equal to `36`")  # noqa: E501
        if uuid is not None and len(uuid) < 36:
            raise ValueError("Invalid value for `uuid`, length must be greater than or equal to `36`")  # noqa: E501

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this LocationModel.  # noqa: E501


        :return: The name of this LocationModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LocationModel.


        :param name: The name of this LocationModel.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501

        self._name = name

    @property
    def location_id(self):
        """Gets the location_id of this LocationModel.  # noqa: E501


        :return: The location_id of this LocationModel.  # noqa: E501
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this LocationModel.


        :param location_id: The location_id of this LocationModel.  # noqa: E501
        :type: int
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")  # noqa: E501

        self._location_id = location_id

    @property
    def description(self):
        """Gets the description of this LocationModel.  # noqa: E501


        :return: The description of this LocationModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LocationModel.


        :param description: The description of this LocationModel.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 128:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `128`")  # noqa: E501

        self._description = description

    @property
    def dc_count(self):
        """Gets the dc_count of this LocationModel.  # noqa: E501


        :return: The dc_count of this LocationModel.  # noqa: E501
        :rtype: int
        """
        return self._dc_count

    @dc_count.setter
    def dc_count(self, dc_count):
        """Sets the dc_count of this LocationModel.


        :param dc_count: The dc_count of this LocationModel.  # noqa: E501
        :type: int
        """

        self._dc_count = dc_count

    @property
    def enable(self):
        """Gets the enable of this LocationModel.  # noqa: E501


        :return: The enable of this LocationModel.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this LocationModel.


        :param enable: The enable of this LocationModel.  # noqa: E501
        :type: bool
        """
        if enable is None:
            raise ValueError("Invalid value for `enable`, must not be `None`")  # noqa: E501

        self._enable = enable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
