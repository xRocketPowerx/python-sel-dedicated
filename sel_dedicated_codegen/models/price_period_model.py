# coding: utf-8

"""
    Seido User REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.4.8
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PricePeriodModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'year': 'float',
        'day': 'float',
        'month': 'float',
        'hour': 'float'
    }

    attribute_map = {
        'year': 'year',
        'day': 'day',
        'month': 'month',
        'hour': 'hour'
    }

    def __init__(self, year=None, day=None, month=None, hour=None):  # noqa: E501
        """PricePeriodModel - a model defined in OpenAPI"""  # noqa: E501

        self._year = None
        self._day = None
        self._month = None
        self._hour = None
        self.discriminator = None

        if year is not None:
            self.year = year
        if day is not None:
            self.day = day
        if month is not None:
            self.month = month
        if hour is not None:
            self.hour = hour

    @property
    def year(self):
        """Gets the year of this PricePeriodModel.  # noqa: E501


        :return: The year of this PricePeriodModel.  # noqa: E501
        :rtype: float
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this PricePeriodModel.


        :param year: The year of this PricePeriodModel.  # noqa: E501
        :type: float
        """
        if year is not None and year < 0.01:  # noqa: E501
            raise ValueError("Invalid value for `year`, must be a value greater than or equal to `0.01`")  # noqa: E501

        self._year = year

    @property
    def day(self):
        """Gets the day of this PricePeriodModel.  # noqa: E501


        :return: The day of this PricePeriodModel.  # noqa: E501
        :rtype: float
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this PricePeriodModel.


        :param day: The day of this PricePeriodModel.  # noqa: E501
        :type: float
        """
        if day is not None and day < 0.01:  # noqa: E501
            raise ValueError("Invalid value for `day`, must be a value greater than or equal to `0.01`")  # noqa: E501

        self._day = day

    @property
    def month(self):
        """Gets the month of this PricePeriodModel.  # noqa: E501


        :return: The month of this PricePeriodModel.  # noqa: E501
        :rtype: float
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this PricePeriodModel.


        :param month: The month of this PricePeriodModel.  # noqa: E501
        :type: float
        """
        if month is not None and month < 0.01:  # noqa: E501
            raise ValueError("Invalid value for `month`, must be a value greater than or equal to `0.01`")  # noqa: E501

        self._month = month

    @property
    def hour(self):
        """Gets the hour of this PricePeriodModel.  # noqa: E501


        :return: The hour of this PricePeriodModel.  # noqa: E501
        :rtype: float
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this PricePeriodModel.


        :param hour: The hour of this PricePeriodModel.  # noqa: E501
        :type: float
        """
        if hour is not None and hour < 0.01:  # noqa: E501
            raise ValueError("Invalid value for `hour`, must be a value greater than or equal to `0.01`")  # noqa: E501

        self._hour = hour

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PricePeriodModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
