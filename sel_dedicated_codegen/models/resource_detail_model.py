# coding: utf-8

"""
    Seido User REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.4.8
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ResourceDetailModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uuid': 'str',
        'info': 'str',
        'created': 'int',
        'is_processing': 'bool',
        'hw_uuid': 'str',
        'owner_id': 'int',
        'state': 'str',
        'previous_state': 'str',
        'location_uuid': 'str',
        'user_desc': 'str',
        'pay_day': 'int',
        'primary_uuid': 'str',
        'is_primary': 'bool',
        'is_single_prolonged': 'bool',
        'service_uuid': 'str',
        'quantity': 'int',
        'service_type': 'str',
        'config_name': 'str',
        'billing': 'BillingModel',
        'paid_till': 'int',
        'actual_grace_date': 'int',
        'actual_dead_date': 'int',
        'tags': 'list[ResourceTagModel]',
        'ordered': 'list[ResourceOrderedModel]',
        'addition_services': 'list[ResourceAdditionServiceModel]',
        'available_plan': 'list[str]'
    }

    attribute_map = {
        'uuid': 'uuid',
        'info': 'info',
        'created': 'created',
        'is_processing': 'is_processing',
        'hw_uuid': 'hw_uuid',
        'owner_id': 'owner_id',
        'state': 'state',
        'previous_state': 'previous_state',
        'location_uuid': 'location_uuid',
        'user_desc': 'user_desc',
        'pay_day': 'pay_day',
        'primary_uuid': 'primary_uuid',
        'is_primary': 'is_primary',
        'is_single_prolonged': 'is_single_prolonged',
        'service_uuid': 'service_uuid',
        'quantity': 'quantity',
        'service_type': 'service_type',
        'config_name': 'config_name',
        'billing': 'billing',
        'paid_till': 'paid_till',
        'actual_grace_date': 'actual_grace_date',
        'actual_dead_date': 'actual_dead_date',
        'tags': 'tags',
        'ordered': 'ordered',
        'addition_services': 'addition_services',
        'available_plan': 'available_plan'
    }

    def __init__(self, uuid=None, info=None, created=None, is_processing=None, hw_uuid=None, owner_id=None, state=None, previous_state=None, location_uuid=None, user_desc=None, pay_day=None, primary_uuid=None, is_primary=None, is_single_prolonged=None, service_uuid=None, quantity=None, service_type=None, config_name=None, billing=None, paid_till=None, actual_grace_date=None, actual_dead_date=None, tags=None, ordered=None, addition_services=None, available_plan=None):  # noqa: E501
        """ResourceDetailModel - a model defined in OpenAPI"""  # noqa: E501

        self._uuid = None
        self._info = None
        self._created = None
        self._is_processing = None
        self._hw_uuid = None
        self._owner_id = None
        self._state = None
        self._previous_state = None
        self._location_uuid = None
        self._user_desc = None
        self._pay_day = None
        self._primary_uuid = None
        self._is_primary = None
        self._is_single_prolonged = None
        self._service_uuid = None
        self._quantity = None
        self._service_type = None
        self._config_name = None
        self._billing = None
        self._paid_till = None
        self._actual_grace_date = None
        self._actual_dead_date = None
        self._tags = None
        self._ordered = None
        self._addition_services = None
        self._available_plan = None
        self.discriminator = None

        self.uuid = uuid
        if info is not None:
            self.info = info
        if created is not None:
            self.created = created
        self.is_processing = is_processing
        self.hw_uuid = hw_uuid
        self.owner_id = owner_id
        self.state = state
        self.previous_state = previous_state
        self.location_uuid = location_uuid
        if user_desc is not None:
            self.user_desc = user_desc
        if pay_day is not None:
            self.pay_day = pay_day
        if primary_uuid is not None:
            self.primary_uuid = primary_uuid
        self.is_primary = is_primary
        self.is_single_prolonged = is_single_prolonged
        self.service_uuid = service_uuid
        self.quantity = quantity
        self.service_type = service_type
        self.config_name = config_name
        self.billing = billing
        self.paid_till = paid_till
        if actual_grace_date is not None:
            self.actual_grace_date = actual_grace_date
        if actual_dead_date is not None:
            self.actual_dead_date = actual_dead_date
        self.tags = tags
        if ordered is not None:
            self.ordered = ordered
        if addition_services is not None:
            self.addition_services = addition_services
        if available_plan is not None:
            self.available_plan = available_plan

    @property
    def uuid(self):
        """Gets the uuid of this ResourceDetailModel.  # noqa: E501


        :return: The uuid of this ResourceDetailModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ResourceDetailModel.


        :param uuid: The uuid of this ResourceDetailModel.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501
        if uuid is not None and len(uuid) > 36:
            raise ValueError("Invalid value for `uuid`, length must be less than or equal to `36`")  # noqa: E501
        if uuid is not None and len(uuid) < 36:
            raise ValueError("Invalid value for `uuid`, length must be greater than or equal to `36`")  # noqa: E501

        self._uuid = uuid

    @property
    def info(self):
        """Gets the info of this ResourceDetailModel.  # noqa: E501


        :return: The info of this ResourceDetailModel.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this ResourceDetailModel.


        :param info: The info of this ResourceDetailModel.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def created(self):
        """Gets the created of this ResourceDetailModel.  # noqa: E501


        :return: The created of this ResourceDetailModel.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ResourceDetailModel.


        :param created: The created of this ResourceDetailModel.  # noqa: E501
        :type: int
        """

        self._created = created

    @property
    def is_processing(self):
        """Gets the is_processing of this ResourceDetailModel.  # noqa: E501


        :return: The is_processing of this ResourceDetailModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_processing

    @is_processing.setter
    def is_processing(self, is_processing):
        """Sets the is_processing of this ResourceDetailModel.


        :param is_processing: The is_processing of this ResourceDetailModel.  # noqa: E501
        :type: bool
        """
        if is_processing is None:
            raise ValueError("Invalid value for `is_processing`, must not be `None`")  # noqa: E501

        self._is_processing = is_processing

    @property
    def hw_uuid(self):
        """Gets the hw_uuid of this ResourceDetailModel.  # noqa: E501


        :return: The hw_uuid of this ResourceDetailModel.  # noqa: E501
        :rtype: str
        """
        return self._hw_uuid

    @hw_uuid.setter
    def hw_uuid(self, hw_uuid):
        """Sets the hw_uuid of this ResourceDetailModel.


        :param hw_uuid: The hw_uuid of this ResourceDetailModel.  # noqa: E501
        :type: str
        """
        if hw_uuid is None:
            raise ValueError("Invalid value for `hw_uuid`, must not be `None`")  # noqa: E501
        if hw_uuid is not None and len(hw_uuid) > 36:
            raise ValueError("Invalid value for `hw_uuid`, length must be less than or equal to `36`")  # noqa: E501
        if hw_uuid is not None and len(hw_uuid) < 36:
            raise ValueError("Invalid value for `hw_uuid`, length must be greater than or equal to `36`")  # noqa: E501

        self._hw_uuid = hw_uuid

    @property
    def owner_id(self):
        """Gets the owner_id of this ResourceDetailModel.  # noqa: E501


        :return: The owner_id of this ResourceDetailModel.  # noqa: E501
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this ResourceDetailModel.


        :param owner_id: The owner_id of this ResourceDetailModel.  # noqa: E501
        :type: int
        """
        if owner_id is None:
            raise ValueError("Invalid value for `owner_id`, must not be `None`")  # noqa: E501

        self._owner_id = owner_id

    @property
    def state(self):
        """Gets the state of this ResourceDetailModel.  # noqa: E501


        :return: The state of this ResourceDetailModel.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ResourceDetailModel.


        :param state: The state of this ResourceDetailModel.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["pending", "processing", "prolong", "paid", "deploy", "active", "expiring", "ending", "cancelling", "unpaid", "blocked", "provided", "cancel", "deleted"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def previous_state(self):
        """Gets the previous_state of this ResourceDetailModel.  # noqa: E501


        :return: The previous_state of this ResourceDetailModel.  # noqa: E501
        :rtype: str
        """
        return self._previous_state

    @previous_state.setter
    def previous_state(self, previous_state):
        """Sets the previous_state of this ResourceDetailModel.


        :param previous_state: The previous_state of this ResourceDetailModel.  # noqa: E501
        :type: str
        """
        if previous_state is None:
            raise ValueError("Invalid value for `previous_state`, must not be `None`")  # noqa: E501
        allowed_values = ["pending", "processing", "prolong", "paid", "deploy", "active", "expiring", "ending", "cancelling", "unpaid", "blocked", "provided", "cancel", "deleted"]  # noqa: E501
        if previous_state not in allowed_values:
            raise ValueError(
                "Invalid value for `previous_state` ({0}), must be one of {1}"  # noqa: E501
                .format(previous_state, allowed_values)
            )

        self._previous_state = previous_state

    @property
    def location_uuid(self):
        """Gets the location_uuid of this ResourceDetailModel.  # noqa: E501


        :return: The location_uuid of this ResourceDetailModel.  # noqa: E501
        :rtype: str
        """
        return self._location_uuid

    @location_uuid.setter
    def location_uuid(self, location_uuid):
        """Sets the location_uuid of this ResourceDetailModel.


        :param location_uuid: The location_uuid of this ResourceDetailModel.  # noqa: E501
        :type: str
        """
        if location_uuid is None:
            raise ValueError("Invalid value for `location_uuid`, must not be `None`")  # noqa: E501
        if location_uuid is not None and len(location_uuid) > 36:
            raise ValueError("Invalid value for `location_uuid`, length must be less than or equal to `36`")  # noqa: E501
        if location_uuid is not None and len(location_uuid) < 36:
            raise ValueError("Invalid value for `location_uuid`, length must be greater than or equal to `36`")  # noqa: E501

        self._location_uuid = location_uuid

    @property
    def user_desc(self):
        """Gets the user_desc of this ResourceDetailModel.  # noqa: E501


        :return: The user_desc of this ResourceDetailModel.  # noqa: E501
        :rtype: str
        """
        return self._user_desc

    @user_desc.setter
    def user_desc(self, user_desc):
        """Sets the user_desc of this ResourceDetailModel.


        :param user_desc: The user_desc of this ResourceDetailModel.  # noqa: E501
        :type: str
        """

        self._user_desc = user_desc

    @property
    def pay_day(self):
        """Gets the pay_day of this ResourceDetailModel.  # noqa: E501


        :return: The pay_day of this ResourceDetailModel.  # noqa: E501
        :rtype: int
        """
        return self._pay_day

    @pay_day.setter
    def pay_day(self, pay_day):
        """Sets the pay_day of this ResourceDetailModel.


        :param pay_day: The pay_day of this ResourceDetailModel.  # noqa: E501
        :type: int
        """

        self._pay_day = pay_day

    @property
    def primary_uuid(self):
        """Gets the primary_uuid of this ResourceDetailModel.  # noqa: E501


        :return: The primary_uuid of this ResourceDetailModel.  # noqa: E501
        :rtype: str
        """
        return self._primary_uuid

    @primary_uuid.setter
    def primary_uuid(self, primary_uuid):
        """Sets the primary_uuid of this ResourceDetailModel.


        :param primary_uuid: The primary_uuid of this ResourceDetailModel.  # noqa: E501
        :type: str
        """
        if primary_uuid is not None and len(primary_uuid) > 36:
            raise ValueError("Invalid value for `primary_uuid`, length must be less than or equal to `36`")  # noqa: E501
        if primary_uuid is not None and len(primary_uuid) < 36:
            raise ValueError("Invalid value for `primary_uuid`, length must be greater than or equal to `36`")  # noqa: E501

        self._primary_uuid = primary_uuid

    @property
    def is_primary(self):
        """Gets the is_primary of this ResourceDetailModel.  # noqa: E501


        :return: The is_primary of this ResourceDetailModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_primary

    @is_primary.setter
    def is_primary(self, is_primary):
        """Sets the is_primary of this ResourceDetailModel.


        :param is_primary: The is_primary of this ResourceDetailModel.  # noqa: E501
        :type: bool
        """
        if is_primary is None:
            raise ValueError("Invalid value for `is_primary`, must not be `None`")  # noqa: E501

        self._is_primary = is_primary

    @property
    def is_single_prolonged(self):
        """Gets the is_single_prolonged of this ResourceDetailModel.  # noqa: E501


        :return: The is_single_prolonged of this ResourceDetailModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_single_prolonged

    @is_single_prolonged.setter
    def is_single_prolonged(self, is_single_prolonged):
        """Sets the is_single_prolonged of this ResourceDetailModel.


        :param is_single_prolonged: The is_single_prolonged of this ResourceDetailModel.  # noqa: E501
        :type: bool
        """
        if is_single_prolonged is None:
            raise ValueError("Invalid value for `is_single_prolonged`, must not be `None`")  # noqa: E501

        self._is_single_prolonged = is_single_prolonged

    @property
    def service_uuid(self):
        """Gets the service_uuid of this ResourceDetailModel.  # noqa: E501


        :return: The service_uuid of this ResourceDetailModel.  # noqa: E501
        :rtype: str
        """
        return self._service_uuid

    @service_uuid.setter
    def service_uuid(self, service_uuid):
        """Sets the service_uuid of this ResourceDetailModel.


        :param service_uuid: The service_uuid of this ResourceDetailModel.  # noqa: E501
        :type: str
        """
        if service_uuid is None:
            raise ValueError("Invalid value for `service_uuid`, must not be `None`")  # noqa: E501
        if service_uuid is not None and len(service_uuid) > 36:
            raise ValueError("Invalid value for `service_uuid`, length must be less than or equal to `36`")  # noqa: E501
        if service_uuid is not None and len(service_uuid) < 36:
            raise ValueError("Invalid value for `service_uuid`, length must be greater than or equal to `36`")  # noqa: E501

        self._service_uuid = service_uuid

    @property
    def quantity(self):
        """Gets the quantity of this ResourceDetailModel.  # noqa: E501


        :return: The quantity of this ResourceDetailModel.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ResourceDetailModel.


        :param quantity: The quantity of this ResourceDetailModel.  # noqa: E501
        :type: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def service_type(self):
        """Gets the service_type of this ResourceDetailModel.  # noqa: E501


        :return: The service_type of this ResourceDetailModel.  # noqa: E501
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this ResourceDetailModel.


        :param service_type: The service_type of this ResourceDetailModel.  # noqa: E501
        :type: str
        """
        if service_type is None:
            raise ValueError("Invalid value for `service_type`, must not be `None`")  # noqa: E501

        self._service_type = service_type

    @property
    def config_name(self):
        """Gets the config_name of this ResourceDetailModel.  # noqa: E501


        :return: The config_name of this ResourceDetailModel.  # noqa: E501
        :rtype: str
        """
        return self._config_name

    @config_name.setter
    def config_name(self, config_name):
        """Sets the config_name of this ResourceDetailModel.


        :param config_name: The config_name of this ResourceDetailModel.  # noqa: E501
        :type: str
        """
        if config_name is None:
            raise ValueError("Invalid value for `config_name`, must not be `None`")  # noqa: E501

        self._config_name = config_name

    @property
    def billing(self):
        """Gets the billing of this ResourceDetailModel.  # noqa: E501


        :return: The billing of this ResourceDetailModel.  # noqa: E501
        :rtype: BillingModel
        """
        return self._billing

    @billing.setter
    def billing(self, billing):
        """Sets the billing of this ResourceDetailModel.


        :param billing: The billing of this ResourceDetailModel.  # noqa: E501
        :type: BillingModel
        """
        if billing is None:
            raise ValueError("Invalid value for `billing`, must not be `None`")  # noqa: E501

        self._billing = billing

    @property
    def paid_till(self):
        """Gets the paid_till of this ResourceDetailModel.  # noqa: E501

        Start order date from resource  # noqa: E501

        :return: The paid_till of this ResourceDetailModel.  # noqa: E501
        :rtype: int
        """
        return self._paid_till

    @paid_till.setter
    def paid_till(self, paid_till):
        """Sets the paid_till of this ResourceDetailModel.

        Start order date from resource  # noqa: E501

        :param paid_till: The paid_till of this ResourceDetailModel.  # noqa: E501
        :type: int
        """
        if paid_till is None:
            raise ValueError("Invalid value for `paid_till`, must not be `None`")  # noqa: E501

        self._paid_till = paid_till

    @property
    def actual_grace_date(self):
        """Gets the actual_grace_date of this ResourceDetailModel.  # noqa: E501

        Actual grace date from resource  # noqa: E501

        :return: The actual_grace_date of this ResourceDetailModel.  # noqa: E501
        :rtype: int
        """
        return self._actual_grace_date

    @actual_grace_date.setter
    def actual_grace_date(self, actual_grace_date):
        """Sets the actual_grace_date of this ResourceDetailModel.

        Actual grace date from resource  # noqa: E501

        :param actual_grace_date: The actual_grace_date of this ResourceDetailModel.  # noqa: E501
        :type: int
        """

        self._actual_grace_date = actual_grace_date

    @property
    def actual_dead_date(self):
        """Gets the actual_dead_date of this ResourceDetailModel.  # noqa: E501

        Actual dead date from resource  # noqa: E501

        :return: The actual_dead_date of this ResourceDetailModel.  # noqa: E501
        :rtype: int
        """
        return self._actual_dead_date

    @actual_dead_date.setter
    def actual_dead_date(self, actual_dead_date):
        """Sets the actual_dead_date of this ResourceDetailModel.

        Actual dead date from resource  # noqa: E501

        :param actual_dead_date: The actual_dead_date of this ResourceDetailModel.  # noqa: E501
        :type: int
        """

        self._actual_dead_date = actual_dead_date

    @property
    def tags(self):
        """Gets the tags of this ResourceDetailModel.  # noqa: E501


        :return: The tags of this ResourceDetailModel.  # noqa: E501
        :rtype: list[ResourceTagModel]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ResourceDetailModel.


        :param tags: The tags of this ResourceDetailModel.  # noqa: E501
        :type: list[ResourceTagModel]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def ordered(self):
        """Gets the ordered of this ResourceDetailModel.  # noqa: E501


        :return: The ordered of this ResourceDetailModel.  # noqa: E501
        :rtype: list[ResourceOrderedModel]
        """
        return self._ordered

    @ordered.setter
    def ordered(self, ordered):
        """Sets the ordered of this ResourceDetailModel.


        :param ordered: The ordered of this ResourceDetailModel.  # noqa: E501
        :type: list[ResourceOrderedModel]
        """

        self._ordered = ordered

    @property
    def addition_services(self):
        """Gets the addition_services of this ResourceDetailModel.  # noqa: E501


        :return: The addition_services of this ResourceDetailModel.  # noqa: E501
        :rtype: list[ResourceAdditionServiceModel]
        """
        return self._addition_services

    @addition_services.setter
    def addition_services(self, addition_services):
        """Sets the addition_services of this ResourceDetailModel.


        :param addition_services: The addition_services of this ResourceDetailModel.  # noqa: E501
        :type: list[ResourceAdditionServiceModel]
        """

        self._addition_services = addition_services

    @property
    def available_plan(self):
        """Gets the available_plan of this ResourceDetailModel.  # noqa: E501


        :return: The available_plan of this ResourceDetailModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_plan

    @available_plan.setter
    def available_plan(self, available_plan):
        """Sets the available_plan of this ResourceDetailModel.


        :param available_plan: The available_plan of this ResourceDetailModel.  # noqa: E501
        :type: list[str]
        """

        self._available_plan = available_plan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceDetailModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
