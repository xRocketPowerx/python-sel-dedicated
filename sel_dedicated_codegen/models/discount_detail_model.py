# coding: utf-8

"""
    Seido User REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.4.8
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DiscountDetailModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user': 'int',
        'resource': 'int',
        'price_plan': 'int',
        'campaign': 'int'
    }

    attribute_map = {
        'user': 'user',
        'resource': 'resource',
        'price_plan': 'price_plan',
        'campaign': 'campaign'
    }

    def __init__(self, user=None, resource=None, price_plan=None, campaign=None):  # noqa: E501
        """DiscountDetailModel - a model defined in OpenAPI"""  # noqa: E501

        self._user = None
        self._resource = None
        self._price_plan = None
        self._campaign = None
        self.discriminator = None

        self.user = user
        self.resource = resource
        self.price_plan = price_plan
        self.campaign = campaign

    @property
    def user(self):
        """Gets the user of this DiscountDetailModel.  # noqa: E501


        :return: The user of this DiscountDetailModel.  # noqa: E501
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this DiscountDetailModel.


        :param user: The user of this DiscountDetailModel.  # noqa: E501
        :type: int
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def resource(self):
        """Gets the resource of this DiscountDetailModel.  # noqa: E501


        :return: The resource of this DiscountDetailModel.  # noqa: E501
        :rtype: int
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this DiscountDetailModel.


        :param resource: The resource of this DiscountDetailModel.  # noqa: E501
        :type: int
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")  # noqa: E501

        self._resource = resource

    @property
    def price_plan(self):
        """Gets the price_plan of this DiscountDetailModel.  # noqa: E501


        :return: The price_plan of this DiscountDetailModel.  # noqa: E501
        :rtype: int
        """
        return self._price_plan

    @price_plan.setter
    def price_plan(self, price_plan):
        """Sets the price_plan of this DiscountDetailModel.


        :param price_plan: The price_plan of this DiscountDetailModel.  # noqa: E501
        :type: int
        """
        if price_plan is None:
            raise ValueError("Invalid value for `price_plan`, must not be `None`")  # noqa: E501

        self._price_plan = price_plan

    @property
    def campaign(self):
        """Gets the campaign of this DiscountDetailModel.  # noqa: E501


        :return: The campaign of this DiscountDetailModel.  # noqa: E501
        :rtype: int
        """
        return self._campaign

    @campaign.setter
    def campaign(self, campaign):
        """Sets the campaign of this DiscountDetailModel.


        :param campaign: The campaign of this DiscountDetailModel.  # noqa: E501
        :type: int
        """
        if campaign is None:
            raise ValueError("Invalid value for `campaign`, must not be `None`")  # noqa: E501

        self._campaign = campaign

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscountDetailModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
