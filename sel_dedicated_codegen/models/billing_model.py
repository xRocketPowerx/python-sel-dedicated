# coding: utf-8

"""
    Seido User REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.4.8
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BillingModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'currency': 'str',
        'current_price_plan': 'PricePlanModel',
        'next_price_plan': 'PricePlanModel',
        'price': 'NextPriceModel'
    }

    attribute_map = {
        'currency': 'currency',
        'current_price_plan': 'current_price_plan',
        'next_price_plan': 'next_price_plan',
        'price': 'price'
    }

    def __init__(self, currency=None, current_price_plan=None, next_price_plan=None, price=None):  # noqa: E501
        """BillingModel - a model defined in OpenAPI"""  # noqa: E501

        self._currency = None
        self._current_price_plan = None
        self._next_price_plan = None
        self._price = None
        self.discriminator = None

        self.currency = currency
        self.current_price_plan = current_price_plan
        if next_price_plan is not None:
            self.next_price_plan = next_price_plan
        if price is not None:
            self.price = price

    @property
    def currency(self):
        """Gets the currency of this BillingModel.  # noqa: E501


        :return: The currency of this BillingModel.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this BillingModel.


        :param currency: The currency of this BillingModel.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def current_price_plan(self):
        """Gets the current_price_plan of this BillingModel.  # noqa: E501


        :return: The current_price_plan of this BillingModel.  # noqa: E501
        :rtype: PricePlanModel
        """
        return self._current_price_plan

    @current_price_plan.setter
    def current_price_plan(self, current_price_plan):
        """Sets the current_price_plan of this BillingModel.


        :param current_price_plan: The current_price_plan of this BillingModel.  # noqa: E501
        :type: PricePlanModel
        """
        if current_price_plan is None:
            raise ValueError("Invalid value for `current_price_plan`, must not be `None`")  # noqa: E501

        self._current_price_plan = current_price_plan

    @property
    def next_price_plan(self):
        """Gets the next_price_plan of this BillingModel.  # noqa: E501


        :return: The next_price_plan of this BillingModel.  # noqa: E501
        :rtype: PricePlanModel
        """
        return self._next_price_plan

    @next_price_plan.setter
    def next_price_plan(self, next_price_plan):
        """Sets the next_price_plan of this BillingModel.


        :param next_price_plan: The next_price_plan of this BillingModel.  # noqa: E501
        :type: PricePlanModel
        """

        self._next_price_plan = next_price_plan

    @property
    def price(self):
        """Gets the price of this BillingModel.  # noqa: E501


        :return: The price of this BillingModel.  # noqa: E501
        :rtype: NextPriceModel
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this BillingModel.


        :param price: The price of this BillingModel.  # noqa: E501
        :type: NextPriceModel
        """

        self._price = price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillingModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
