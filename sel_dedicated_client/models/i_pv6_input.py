# coding: utf-8

"""
    Seido User REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.4.8
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IPv6Input(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ipv6_address': 'str',
        'ipv6_netmask': 'str',
        'ipv6_gateway': 'str'
    }

    attribute_map = {
        'ipv6_address': 'ipv6_address',
        'ipv6_netmask': 'ipv6_netmask',
        'ipv6_gateway': 'ipv6_gateway'
    }

    def __init__(self, ipv6_address=None, ipv6_netmask=None, ipv6_gateway=None):  # noqa: E501
        """IPv6Input - a model defined in OpenAPI"""  # noqa: E501

        self._ipv6_address = None
        self._ipv6_netmask = None
        self._ipv6_gateway = None
        self.discriminator = None

        if ipv6_address is not None:
            self.ipv6_address = ipv6_address
        if ipv6_netmask is not None:
            self.ipv6_netmask = ipv6_netmask
        if ipv6_gateway is not None:
            self.ipv6_gateway = ipv6_gateway

    @property
    def ipv6_address(self):
        """Gets the ipv6_address of this IPv6Input.  # noqa: E501


        :return: The ipv6_address of this IPv6Input.  # noqa: E501
        :rtype: str
        """
        return self._ipv6_address

    @ipv6_address.setter
    def ipv6_address(self, ipv6_address):
        """Sets the ipv6_address of this IPv6Input.


        :param ipv6_address: The ipv6_address of this IPv6Input.  # noqa: E501
        :type: str
        """
        if ipv6_address is not None and len(ipv6_address) > 43:
            raise ValueError("Invalid value for `ipv6_address`, length must be less than or equal to `43`")  # noqa: E501
        if ipv6_address is not None and len(ipv6_address) < 6:
            raise ValueError("Invalid value for `ipv6_address`, length must be greater than or equal to `6`")  # noqa: E501

        self._ipv6_address = ipv6_address

    @property
    def ipv6_netmask(self):
        """Gets the ipv6_netmask of this IPv6Input.  # noqa: E501


        :return: The ipv6_netmask of this IPv6Input.  # noqa: E501
        :rtype: str
        """
        return self._ipv6_netmask

    @ipv6_netmask.setter
    def ipv6_netmask(self, ipv6_netmask):
        """Sets the ipv6_netmask of this IPv6Input.


        :param ipv6_netmask: The ipv6_netmask of this IPv6Input.  # noqa: E501
        :type: str
        """
        if ipv6_netmask is not None and len(ipv6_netmask) > 43:
            raise ValueError("Invalid value for `ipv6_netmask`, length must be less than or equal to `43`")  # noqa: E501
        if ipv6_netmask is not None and len(ipv6_netmask) < 6:
            raise ValueError("Invalid value for `ipv6_netmask`, length must be greater than or equal to `6`")  # noqa: E501

        self._ipv6_netmask = ipv6_netmask

    @property
    def ipv6_gateway(self):
        """Gets the ipv6_gateway of this IPv6Input.  # noqa: E501


        :return: The ipv6_gateway of this IPv6Input.  # noqa: E501
        :rtype: str
        """
        return self._ipv6_gateway

    @ipv6_gateway.setter
    def ipv6_gateway(self, ipv6_gateway):
        """Sets the ipv6_gateway of this IPv6Input.


        :param ipv6_gateway: The ipv6_gateway of this IPv6Input.  # noqa: E501
        :type: str
        """
        if ipv6_gateway is not None and len(ipv6_gateway) > 43:
            raise ValueError("Invalid value for `ipv6_gateway`, length must be less than or equal to `43`")  # noqa: E501
        if ipv6_gateway is not None and len(ipv6_gateway) < 6:
            raise ValueError("Invalid value for `ipv6_gateway`, length must be greater than or equal to `6`")  # noqa: E501

        self._ipv6_gateway = ipv6_gateway

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPv6Input):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
