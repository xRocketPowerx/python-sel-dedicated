# coding: utf-8

"""
    Seido User REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.4.8
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class OSTemplate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'login': 'str',
        'value': 'str',
        'arch': 'list[str]',
        'partitioning': 'bool',
        'default_partitions': 'list[Partition]',
        'allowed_fs_types': 'list[str]',
        'raid': 'list[Raid]',
        'versions': 'list[OSVersion]'
    }

    attribute_map = {
        'name': 'name',
        'login': 'login',
        'value': 'value',
        'arch': 'arch',
        'partitioning': 'partitioning',
        'default_partitions': 'default_partitions',
        'allowed_fs_types': 'allowed_fs_types',
        'raid': 'raid',
        'versions': 'versions'
    }

    def __init__(self, name=None, login=None, value=None, arch=None, partitioning=None, default_partitions=None, allowed_fs_types=None, raid=None, versions=None):  # noqa: E501
        """OSTemplate - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._login = None
        self._value = None
        self._arch = None
        self._partitioning = None
        self._default_partitions = None
        self._allowed_fs_types = None
        self._raid = None
        self._versions = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if login is not None:
            self.login = login
        if value is not None:
            self.value = value
        if arch is not None:
            self.arch = arch
        if partitioning is not None:
            self.partitioning = partitioning
        if default_partitions is not None:
            self.default_partitions = default_partitions
        if allowed_fs_types is not None:
            self.allowed_fs_types = allowed_fs_types
        if raid is not None:
            self.raid = raid
        if versions is not None:
            self.versions = versions

    @property
    def name(self):
        """Gets the name of this OSTemplate.  # noqa: E501


        :return: The name of this OSTemplate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OSTemplate.


        :param name: The name of this OSTemplate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def login(self):
        """Gets the login of this OSTemplate.  # noqa: E501

        default OS login  # noqa: E501

        :return: The login of this OSTemplate.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this OSTemplate.

        default OS login  # noqa: E501

        :param login: The login of this OSTemplate.  # noqa: E501
        :type: str
        """

        self._login = login

    @property
    def value(self):
        """Gets the value of this OSTemplate.  # noqa: E501


        :return: The value of this OSTemplate.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this OSTemplate.


        :param value: The value of this OSTemplate.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def arch(self):
        """Gets the arch of this OSTemplate.  # noqa: E501


        :return: The arch of this OSTemplate.  # noqa: E501
        :rtype: list[str]
        """
        return self._arch

    @arch.setter
    def arch(self, arch):
        """Sets the arch of this OSTemplate.


        :param arch: The arch of this OSTemplate.  # noqa: E501
        :type: list[str]
        """

        self._arch = arch

    @property
    def partitioning(self):
        """Gets the partitioning of this OSTemplate.  # noqa: E501


        :return: The partitioning of this OSTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._partitioning

    @partitioning.setter
    def partitioning(self, partitioning):
        """Sets the partitioning of this OSTemplate.


        :param partitioning: The partitioning of this OSTemplate.  # noqa: E501
        :type: bool
        """

        self._partitioning = partitioning

    @property
    def default_partitions(self):
        """Gets the default_partitions of this OSTemplate.  # noqa: E501


        :return: The default_partitions of this OSTemplate.  # noqa: E501
        :rtype: list[Partition]
        """
        return self._default_partitions

    @default_partitions.setter
    def default_partitions(self, default_partitions):
        """Sets the default_partitions of this OSTemplate.


        :param default_partitions: The default_partitions of this OSTemplate.  # noqa: E501
        :type: list[Partition]
        """

        self._default_partitions = default_partitions

    @property
    def allowed_fs_types(self):
        """Gets the allowed_fs_types of this OSTemplate.  # noqa: E501


        :return: The allowed_fs_types of this OSTemplate.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_fs_types

    @allowed_fs_types.setter
    def allowed_fs_types(self, allowed_fs_types):
        """Sets the allowed_fs_types of this OSTemplate.


        :param allowed_fs_types: The allowed_fs_types of this OSTemplate.  # noqa: E501
        :type: list[str]
        """

        self._allowed_fs_types = allowed_fs_types

    @property
    def raid(self):
        """Gets the raid of this OSTemplate.  # noqa: E501


        :return: The raid of this OSTemplate.  # noqa: E501
        :rtype: list[Raid]
        """
        return self._raid

    @raid.setter
    def raid(self, raid):
        """Sets the raid of this OSTemplate.


        :param raid: The raid of this OSTemplate.  # noqa: E501
        :type: list[Raid]
        """

        self._raid = raid

    @property
    def versions(self):
        """Gets the versions of this OSTemplate.  # noqa: E501


        :return: The versions of this OSTemplate.  # noqa: E501
        :rtype: list[OSVersion]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this OSTemplate.


        :param versions: The versions of this OSTemplate.  # noqa: E501
        :type: list[OSVersion]
        """

        self._versions = versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OSTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
