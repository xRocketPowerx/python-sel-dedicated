# coding: utf-8

"""
    Seido User REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.4.8
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NetworkLimitModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uuid': 'str',
        'created': 'int',
        'updated': 'int',
        'enable': 'bool',
        'current_limit_type': 'str',
        'next_limit_type': 'str',
        'limit': 'int',
        'limit_last_switch': 'int'
    }

    attribute_map = {
        'uuid': 'uuid',
        'created': 'created',
        'updated': 'updated',
        'enable': 'enable',
        'current_limit_type': 'current_limit_type',
        'next_limit_type': 'next_limit_type',
        'limit': 'limit',
        'limit_last_switch': 'limit_last_switch'
    }

    def __init__(self, uuid=None, created=None, updated=None, enable=None, current_limit_type=None, next_limit_type=None, limit=None, limit_last_switch=None):  # noqa: E501
        """NetworkLimitModel - a model defined in OpenAPI"""  # noqa: E501

        self._uuid = None
        self._created = None
        self._updated = None
        self._enable = None
        self._current_limit_type = None
        self._next_limit_type = None
        self._limit = None
        self._limit_last_switch = None
        self.discriminator = None

        self.uuid = uuid
        self.created = created
        self.updated = updated
        self.enable = enable
        if current_limit_type is not None:
            self.current_limit_type = current_limit_type
        if next_limit_type is not None:
            self.next_limit_type = next_limit_type
        self.limit = limit
        if limit_last_switch is not None:
            self.limit_last_switch = limit_last_switch

    @property
    def uuid(self):
        """Gets the uuid of this NetworkLimitModel.  # noqa: E501


        :return: The uuid of this NetworkLimitModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this NetworkLimitModel.


        :param uuid: The uuid of this NetworkLimitModel.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501
        if uuid is not None and len(uuid) > 36:
            raise ValueError("Invalid value for `uuid`, length must be less than or equal to `36`")  # noqa: E501
        if uuid is not None and len(uuid) < 36:
            raise ValueError("Invalid value for `uuid`, length must be greater than or equal to `36`")  # noqa: E501

        self._uuid = uuid

    @property
    def created(self):
        """Gets the created of this NetworkLimitModel.  # noqa: E501


        :return: The created of this NetworkLimitModel.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this NetworkLimitModel.


        :param created: The created of this NetworkLimitModel.  # noqa: E501
        :type: int
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this NetworkLimitModel.  # noqa: E501


        :return: The updated of this NetworkLimitModel.  # noqa: E501
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this NetworkLimitModel.


        :param updated: The updated of this NetworkLimitModel.  # noqa: E501
        :type: int
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    @property
    def enable(self):
        """Gets the enable of this NetworkLimitModel.  # noqa: E501


        :return: The enable of this NetworkLimitModel.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this NetworkLimitModel.


        :param enable: The enable of this NetworkLimitModel.  # noqa: E501
        :type: bool
        """
        if enable is None:
            raise ValueError("Invalid value for `enable`, must not be `None`")  # noqa: E501

        self._enable = enable

    @property
    def current_limit_type(self):
        """Gets the current_limit_type of this NetworkLimitModel.  # noqa: E501


        :return: The current_limit_type of this NetworkLimitModel.  # noqa: E501
        :rtype: str
        """
        return self._current_limit_type

    @current_limit_type.setter
    def current_limit_type(self, current_limit_type):
        """Sets the current_limit_type of this NetworkLimitModel.


        :param current_limit_type: The current_limit_type of this NetworkLimitModel.  # noqa: E501
        :type: str
        """

        self._current_limit_type = current_limit_type

    @property
    def next_limit_type(self):
        """Gets the next_limit_type of this NetworkLimitModel.  # noqa: E501


        :return: The next_limit_type of this NetworkLimitModel.  # noqa: E501
        :rtype: str
        """
        return self._next_limit_type

    @next_limit_type.setter
    def next_limit_type(self, next_limit_type):
        """Sets the next_limit_type of this NetworkLimitModel.


        :param next_limit_type: The next_limit_type of this NetworkLimitModel.  # noqa: E501
        :type: str
        """

        self._next_limit_type = next_limit_type

    @property
    def limit(self):
        """Gets the limit of this NetworkLimitModel.  # noqa: E501


        :return: The limit of this NetworkLimitModel.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this NetworkLimitModel.


        :param limit: The limit of this NetworkLimitModel.  # noqa: E501
        :type: int
        """
        if limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")  # noqa: E501

        self._limit = limit

    @property
    def limit_last_switch(self):
        """Gets the limit_last_switch of this NetworkLimitModel.  # noqa: E501


        :return: The limit_last_switch of this NetworkLimitModel.  # noqa: E501
        :rtype: int
        """
        return self._limit_last_switch

    @limit_last_switch.setter
    def limit_last_switch(self, limit_last_switch):
        """Sets the limit_last_switch of this NetworkLimitModel.


        :param limit_last_switch: The limit_last_switch of this NetworkLimitModel.  # noqa: E501
        :type: int
        """

        self._limit_last_switch = limit_last_switch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkLimitModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
