# coding: utf-8

"""
    Seido User REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.4.8
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ResourceOrdersModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created': 'int',
        'name': 'str',
        'resource_uuid': 'str',
        'service_model': 'str',
        'resource_primary_uuid': 'str',
        'discount': 'int',
        'price_plan': 'str',
        'pay_currency': 'str',
        'currency': 'str',
        'paid_till': 'int',
        'due_date': 'int',
        'price': 'float',
        'state': 'str'
    }

    attribute_map = {
        'created': 'created',
        'name': 'name',
        'resource_uuid': 'resource_uuid',
        'service_model': 'service_model',
        'resource_primary_uuid': 'resource_primary_uuid',
        'discount': 'discount',
        'price_plan': 'price_plan',
        'pay_currency': 'pay_currency',
        'currency': 'currency',
        'paid_till': 'paid_till',
        'due_date': 'due_date',
        'price': 'price',
        'state': 'state'
    }

    def __init__(self, created=None, name=None, resource_uuid=None, service_model=None, resource_primary_uuid=None, discount=None, price_plan=None, pay_currency=None, currency=None, paid_till=None, due_date=None, price=None, state=None):  # noqa: E501
        """ResourceOrdersModel - a model defined in OpenAPI"""  # noqa: E501

        self._created = None
        self._name = None
        self._resource_uuid = None
        self._service_model = None
        self._resource_primary_uuid = None
        self._discount = None
        self._price_plan = None
        self._pay_currency = None
        self._currency = None
        self._paid_till = None
        self._due_date = None
        self._price = None
        self._state = None
        self.discriminator = None

        self.created = created
        self.name = name
        self.resource_uuid = resource_uuid
        if service_model is not None:
            self.service_model = service_model
        self.resource_primary_uuid = resource_primary_uuid
        self.discount = discount
        self.price_plan = price_plan
        self.pay_currency = pay_currency
        self.currency = currency
        self.paid_till = paid_till
        self.due_date = due_date
        self.price = price
        self.state = state

    @property
    def created(self):
        """Gets the created of this ResourceOrdersModel.  # noqa: E501

        Current debt date  # noqa: E501

        :return: The created of this ResourceOrdersModel.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ResourceOrdersModel.

        Current debt date  # noqa: E501

        :param created: The created of this ResourceOrdersModel.  # noqa: E501
        :type: int
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def name(self):
        """Gets the name of this ResourceOrdersModel.  # noqa: E501


        :return: The name of this ResourceOrdersModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceOrdersModel.


        :param name: The name of this ResourceOrdersModel.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def resource_uuid(self):
        """Gets the resource_uuid of this ResourceOrdersModel.  # noqa: E501


        :return: The resource_uuid of this ResourceOrdersModel.  # noqa: E501
        :rtype: str
        """
        return self._resource_uuid

    @resource_uuid.setter
    def resource_uuid(self, resource_uuid):
        """Sets the resource_uuid of this ResourceOrdersModel.


        :param resource_uuid: The resource_uuid of this ResourceOrdersModel.  # noqa: E501
        :type: str
        """
        if resource_uuid is None:
            raise ValueError("Invalid value for `resource_uuid`, must not be `None`")  # noqa: E501
        if resource_uuid is not None and len(resource_uuid) > 36:
            raise ValueError("Invalid value for `resource_uuid`, length must be less than or equal to `36`")  # noqa: E501
        if resource_uuid is not None and len(resource_uuid) < 36:
            raise ValueError("Invalid value for `resource_uuid`, length must be greater than or equal to `36`")  # noqa: E501

        self._resource_uuid = resource_uuid

    @property
    def service_model(self):
        """Gets the service_model of this ResourceOrdersModel.  # noqa: E501

        Service model for resource  # noqa: E501

        :return: The service_model of this ResourceOrdersModel.  # noqa: E501
        :rtype: str
        """
        return self._service_model

    @service_model.setter
    def service_model(self, service_model):
        """Sets the service_model of this ResourceOrdersModel.

        Service model for resource  # noqa: E501

        :param service_model: The service_model of this ResourceOrdersModel.  # noqa: E501
        :type: str
        """

        self._service_model = service_model

    @property
    def resource_primary_uuid(self):
        """Gets the resource_primary_uuid of this ResourceOrdersModel.  # noqa: E501


        :return: The resource_primary_uuid of this ResourceOrdersModel.  # noqa: E501
        :rtype: str
        """
        return self._resource_primary_uuid

    @resource_primary_uuid.setter
    def resource_primary_uuid(self, resource_primary_uuid):
        """Sets the resource_primary_uuid of this ResourceOrdersModel.


        :param resource_primary_uuid: The resource_primary_uuid of this ResourceOrdersModel.  # noqa: E501
        :type: str
        """
        if resource_primary_uuid is None:
            raise ValueError("Invalid value for `resource_primary_uuid`, must not be `None`")  # noqa: E501
        if resource_primary_uuid is not None and len(resource_primary_uuid) > 36:
            raise ValueError("Invalid value for `resource_primary_uuid`, length must be less than or equal to `36`")  # noqa: E501
        if resource_primary_uuid is not None and len(resource_primary_uuid) < 36:
            raise ValueError("Invalid value for `resource_primary_uuid`, length must be greater than or equal to `36`")  # noqa: E501

        self._resource_primary_uuid = resource_primary_uuid

    @property
    def discount(self):
        """Gets the discount of this ResourceOrdersModel.  # noqa: E501


        :return: The discount of this ResourceOrdersModel.  # noqa: E501
        :rtype: int
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this ResourceOrdersModel.


        :param discount: The discount of this ResourceOrdersModel.  # noqa: E501
        :type: int
        """
        if discount is None:
            raise ValueError("Invalid value for `discount`, must not be `None`")  # noqa: E501

        self._discount = discount

    @property
    def price_plan(self):
        """Gets the price_plan of this ResourceOrdersModel.  # noqa: E501


        :return: The price_plan of this ResourceOrdersModel.  # noqa: E501
        :rtype: str
        """
        return self._price_plan

    @price_plan.setter
    def price_plan(self, price_plan):
        """Sets the price_plan of this ResourceOrdersModel.


        :param price_plan: The price_plan of this ResourceOrdersModel.  # noqa: E501
        :type: str
        """
        if price_plan is None:
            raise ValueError("Invalid value for `price_plan`, must not be `None`")  # noqa: E501
        if price_plan is not None and len(price_plan) > 36:
            raise ValueError("Invalid value for `price_plan`, length must be less than or equal to `36`")  # noqa: E501
        if price_plan is not None and len(price_plan) < 36:
            raise ValueError("Invalid value for `price_plan`, length must be greater than or equal to `36`")  # noqa: E501

        self._price_plan = price_plan

    @property
    def pay_currency(self):
        """Gets the pay_currency of this ResourceOrdersModel.  # noqa: E501


        :return: The pay_currency of this ResourceOrdersModel.  # noqa: E501
        :rtype: str
        """
        return self._pay_currency

    @pay_currency.setter
    def pay_currency(self, pay_currency):
        """Sets the pay_currency of this ResourceOrdersModel.


        :param pay_currency: The pay_currency of this ResourceOrdersModel.  # noqa: E501
        :type: str
        """
        if pay_currency is None:
            raise ValueError("Invalid value for `pay_currency`, must not be `None`")  # noqa: E501

        self._pay_currency = pay_currency

    @property
    def currency(self):
        """Gets the currency of this ResourceOrdersModel.  # noqa: E501


        :return: The currency of this ResourceOrdersModel.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ResourceOrdersModel.


        :param currency: The currency of this ResourceOrdersModel.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def paid_till(self):
        """Gets the paid_till of this ResourceOrdersModel.  # noqa: E501

        Start order date  # noqa: E501

        :return: The paid_till of this ResourceOrdersModel.  # noqa: E501
        :rtype: int
        """
        return self._paid_till

    @paid_till.setter
    def paid_till(self, paid_till):
        """Sets the paid_till of this ResourceOrdersModel.

        Start order date  # noqa: E501

        :param paid_till: The paid_till of this ResourceOrdersModel.  # noqa: E501
        :type: int
        """
        if paid_till is None:
            raise ValueError("Invalid value for `paid_till`, must not be `None`")  # noqa: E501

        self._paid_till = paid_till

    @property
    def due_date(self):
        """Gets the due_date of this ResourceOrdersModel.  # noqa: E501

        Paid order date  # noqa: E501

        :return: The due_date of this ResourceOrdersModel.  # noqa: E501
        :rtype: int
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this ResourceOrdersModel.

        Paid order date  # noqa: E501

        :param due_date: The due_date of this ResourceOrdersModel.  # noqa: E501
        :type: int
        """
        if due_date is None:
            raise ValueError("Invalid value for `due_date`, must not be `None`")  # noqa: E501

        self._due_date = due_date

    @property
    def price(self):
        """Gets the price of this ResourceOrdersModel.  # noqa: E501


        :return: The price of this ResourceOrdersModel.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ResourceOrdersModel.


        :param price: The price of this ResourceOrdersModel.  # noqa: E501
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def state(self):
        """Gets the state of this ResourceOrdersModel.  # noqa: E501


        :return: The state of this ResourceOrdersModel.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ResourceOrdersModel.


        :param state: The state of this ResourceOrdersModel.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceOrdersModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
