# coding: utf-8

"""
    Seido User REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.4.8
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ResourceOrderCompensationDetailModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'start': 'int',
        'stop': 'int',
        'comment': 'str',
        'month': 'int',
        'year': 'int',
        'is_applied': 'bool'
    }

    attribute_map = {
        'start': 'start',
        'stop': 'stop',
        'comment': 'comment',
        'month': 'month',
        'year': 'year',
        'is_applied': 'is_applied'
    }

    def __init__(self, start=None, stop=None, comment=None, month=None, year=None, is_applied=None):  # noqa: E501
        """ResourceOrderCompensationDetailModel - a model defined in OpenAPI"""  # noqa: E501

        self._start = None
        self._stop = None
        self._comment = None
        self._month = None
        self._year = None
        self._is_applied = None
        self.discriminator = None

        self.start = start
        self.stop = stop
        self.comment = comment
        self.month = month
        self.year = year
        self.is_applied = is_applied

    @property
    def start(self):
        """Gets the start of this ResourceOrderCompensationDetailModel.  # noqa: E501

        Start compensation period timestamp  # noqa: E501

        :return: The start of this ResourceOrderCompensationDetailModel.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this ResourceOrderCompensationDetailModel.

        Start compensation period timestamp  # noqa: E501

        :param start: The start of this ResourceOrderCompensationDetailModel.  # noqa: E501
        :type: int
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def stop(self):
        """Gets the stop of this ResourceOrderCompensationDetailModel.  # noqa: E501

        Stop compensation period timestamp  # noqa: E501

        :return: The stop of this ResourceOrderCompensationDetailModel.  # noqa: E501
        :rtype: int
        """
        return self._stop

    @stop.setter
    def stop(self, stop):
        """Sets the stop of this ResourceOrderCompensationDetailModel.

        Stop compensation period timestamp  # noqa: E501

        :param stop: The stop of this ResourceOrderCompensationDetailModel.  # noqa: E501
        :type: int
        """
        if stop is None:
            raise ValueError("Invalid value for `stop`, must not be `None`")  # noqa: E501

        self._stop = stop

    @property
    def comment(self):
        """Gets the comment of this ResourceOrderCompensationDetailModel.  # noqa: E501


        :return: The comment of this ResourceOrderCompensationDetailModel.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ResourceOrderCompensationDetailModel.


        :param comment: The comment of this ResourceOrderCompensationDetailModel.  # noqa: E501
        :type: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")  # noqa: E501

        self._comment = comment

    @property
    def month(self):
        """Gets the month of this ResourceOrderCompensationDetailModel.  # noqa: E501


        :return: The month of this ResourceOrderCompensationDetailModel.  # noqa: E501
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this ResourceOrderCompensationDetailModel.


        :param month: The month of this ResourceOrderCompensationDetailModel.  # noqa: E501
        :type: int
        """
        if month is None:
            raise ValueError("Invalid value for `month`, must not be `None`")  # noqa: E501

        self._month = month

    @property
    def year(self):
        """Gets the year of this ResourceOrderCompensationDetailModel.  # noqa: E501


        :return: The year of this ResourceOrderCompensationDetailModel.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this ResourceOrderCompensationDetailModel.


        :param year: The year of this ResourceOrderCompensationDetailModel.  # noqa: E501
        :type: int
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")  # noqa: E501

        self._year = year

    @property
    def is_applied(self):
        """Gets the is_applied of this ResourceOrderCompensationDetailModel.  # noqa: E501


        :return: The is_applied of this ResourceOrderCompensationDetailModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_applied

    @is_applied.setter
    def is_applied(self, is_applied):
        """Sets the is_applied of this ResourceOrderCompensationDetailModel.


        :param is_applied: The is_applied of this ResourceOrderCompensationDetailModel.  # noqa: E501
        :type: bool
        """
        if is_applied is None:
            raise ValueError("Invalid value for `is_applied`, must not be `None`")  # noqa: E501

        self._is_applied = is_applied

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceOrderCompensationDetailModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
