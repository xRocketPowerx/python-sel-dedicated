# coding: utf-8

"""
    Seido User REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.4.8
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class OSVersion(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'value': 'str',
        'outdated': 'bool',
        'visible': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'value': 'value',
        'outdated': 'outdated',
        'visible': 'visible'
    }

    def __init__(self, name=None, value=None, outdated=None, visible=None):  # noqa: E501
        """OSVersion - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._value = None
        self._outdated = None
        self._visible = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if value is not None:
            self.value = value
        if outdated is not None:
            self.outdated = outdated
        if visible is not None:
            self.visible = visible

    @property
    def name(self):
        """Gets the name of this OSVersion.  # noqa: E501


        :return: The name of this OSVersion.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OSVersion.


        :param name: The name of this OSVersion.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this OSVersion.  # noqa: E501


        :return: The value of this OSVersion.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this OSVersion.


        :param value: The value of this OSVersion.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def outdated(self):
        """Gets the outdated of this OSVersion.  # noqa: E501


        :return: The outdated of this OSVersion.  # noqa: E501
        :rtype: bool
        """
        return self._outdated

    @outdated.setter
    def outdated(self, outdated):
        """Sets the outdated of this OSVersion.


        :param outdated: The outdated of this OSVersion.  # noqa: E501
        :type: bool
        """

        self._outdated = outdated

    @property
    def visible(self):
        """Gets the visible of this OSVersion.  # noqa: E501


        :return: The visible of this OSVersion.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this OSVersion.


        :param visible: The visible of this OSVersion.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OSVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
