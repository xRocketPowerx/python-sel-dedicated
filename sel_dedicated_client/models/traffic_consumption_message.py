# coding: utf-8

"""
    Seido User REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.4.8
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TrafficConsumptionMessage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'speed_paid': 'int',
        'traffic_paid': 'int',
        'speed_limit': 'int',
        'traffic_limit': 'int',
        'traffic_spent': 'int',
        'paid': 'int',
        'consumption_type': 'str'
    }

    attribute_map = {
        'speed_paid': 'speed_paid',
        'traffic_paid': 'traffic_paid',
        'speed_limit': 'speed_limit',
        'traffic_limit': 'traffic_limit',
        'traffic_spent': 'traffic_spent',
        'paid': 'paid',
        'consumption_type': 'consumption_type'
    }

    def __init__(self, speed_paid=None, traffic_paid=None, speed_limit=None, traffic_limit=None, traffic_spent=None, paid=None, consumption_type=None):  # noqa: E501
        """TrafficConsumptionMessage - a model defined in OpenAPI"""  # noqa: E501

        self._speed_paid = None
        self._traffic_paid = None
        self._speed_limit = None
        self._traffic_limit = None
        self._traffic_spent = None
        self._paid = None
        self._consumption_type = None
        self.discriminator = None

        self.speed_paid = speed_paid
        self.traffic_paid = traffic_paid
        self.speed_limit = speed_limit
        self.traffic_limit = traffic_limit
        self.traffic_spent = traffic_spent
        self.paid = paid
        self.consumption_type = consumption_type

    @property
    def speed_paid(self):
        """Gets the speed_paid of this TrafficConsumptionMessage.  # noqa: E501

        Speed limit which was paid  # noqa: E501

        :return: The speed_paid of this TrafficConsumptionMessage.  # noqa: E501
        :rtype: int
        """
        return self._speed_paid

    @speed_paid.setter
    def speed_paid(self, speed_paid):
        """Sets the speed_paid of this TrafficConsumptionMessage.

        Speed limit which was paid  # noqa: E501

        :param speed_paid: The speed_paid of this TrafficConsumptionMessage.  # noqa: E501
        :type: int
        """
        if speed_paid is None:
            raise ValueError("Invalid value for `speed_paid`, must not be `None`")  # noqa: E501

        self._speed_paid = speed_paid

    @property
    def traffic_paid(self):
        """Gets the traffic_paid of this TrafficConsumptionMessage.  # noqa: E501

        Traffic limit which was paid  # noqa: E501

        :return: The traffic_paid of this TrafficConsumptionMessage.  # noqa: E501
        :rtype: int
        """
        return self._traffic_paid

    @traffic_paid.setter
    def traffic_paid(self, traffic_paid):
        """Sets the traffic_paid of this TrafficConsumptionMessage.

        Traffic limit which was paid  # noqa: E501

        :param traffic_paid: The traffic_paid of this TrafficConsumptionMessage.  # noqa: E501
        :type: int
        """
        if traffic_paid is None:
            raise ValueError("Invalid value for `traffic_paid`, must not be `None`")  # noqa: E501

        self._traffic_paid = traffic_paid

    @property
    def speed_limit(self):
        """Gets the speed_limit of this TrafficConsumptionMessage.  # noqa: E501

        Speed limit default + paid, Mbit/s  # noqa: E501

        :return: The speed_limit of this TrafficConsumptionMessage.  # noqa: E501
        :rtype: int
        """
        return self._speed_limit

    @speed_limit.setter
    def speed_limit(self, speed_limit):
        """Sets the speed_limit of this TrafficConsumptionMessage.

        Speed limit default + paid, Mbit/s  # noqa: E501

        :param speed_limit: The speed_limit of this TrafficConsumptionMessage.  # noqa: E501
        :type: int
        """
        if speed_limit is None:
            raise ValueError("Invalid value for `speed_limit`, must not be `None`")  # noqa: E501

        self._speed_limit = speed_limit

    @property
    def traffic_limit(self):
        """Gets the traffic_limit of this TrafficConsumptionMessage.  # noqa: E501

        Traffic limit default + paid, GB (Gigabytes, 10^9 bytes)  # noqa: E501

        :return: The traffic_limit of this TrafficConsumptionMessage.  # noqa: E501
        :rtype: int
        """
        return self._traffic_limit

    @traffic_limit.setter
    def traffic_limit(self, traffic_limit):
        """Sets the traffic_limit of this TrafficConsumptionMessage.

        Traffic limit default + paid, GB (Gigabytes, 10^9 bytes)  # noqa: E501

        :param traffic_limit: The traffic_limit of this TrafficConsumptionMessage.  # noqa: E501
        :type: int
        """
        if traffic_limit is None:
            raise ValueError("Invalid value for `traffic_limit`, must not be `None`")  # noqa: E501

        self._traffic_limit = traffic_limit

    @property
    def traffic_spent(self):
        """Gets the traffic_spent of this TrafficConsumptionMessage.  # noqa: E501

        Spent traffic, GB (Gigabytes, 10^9 bytes) in selected month  # noqa: E501

        :return: The traffic_spent of this TrafficConsumptionMessage.  # noqa: E501
        :rtype: int
        """
        return self._traffic_spent

    @traffic_spent.setter
    def traffic_spent(self, traffic_spent):
        """Sets the traffic_spent of this TrafficConsumptionMessage.

        Spent traffic, GB (Gigabytes, 10^9 bytes) in selected month  # noqa: E501

        :param traffic_spent: The traffic_spent of this TrafficConsumptionMessage.  # noqa: E501
        :type: int
        """
        if traffic_spent is None:
            raise ValueError("Invalid value for `traffic_spent`, must not be `None`")  # noqa: E501

        self._traffic_spent = traffic_spent

    @property
    def paid(self):
        """Gets the paid of this TrafficConsumptionMessage.  # noqa: E501

        Paid speed or traffic limit, same units than in limits  # noqa: E501

        :return: The paid of this TrafficConsumptionMessage.  # noqa: E501
        :rtype: int
        """
        return self._paid

    @paid.setter
    def paid(self, paid):
        """Sets the paid of this TrafficConsumptionMessage.

        Paid speed or traffic limit, same units than in limits  # noqa: E501

        :param paid: The paid of this TrafficConsumptionMessage.  # noqa: E501
        :type: int
        """
        if paid is None:
            raise ValueError("Invalid value for `paid`, must not be `None`")  # noqa: E501

        self._paid = paid

    @property
    def consumption_type(self):
        """Gets the consumption_type of this TrafficConsumptionMessage.  # noqa: E501

        Type of limit  # noqa: E501

        :return: The consumption_type of this TrafficConsumptionMessage.  # noqa: E501
        :rtype: str
        """
        return self._consumption_type

    @consumption_type.setter
    def consumption_type(self, consumption_type):
        """Sets the consumption_type of this TrafficConsumptionMessage.

        Type of limit  # noqa: E501

        :param consumption_type: The consumption_type of this TrafficConsumptionMessage.  # noqa: E501
        :type: str
        """
        if consumption_type is None:
            raise ValueError("Invalid value for `consumption_type`, must not be `None`")  # noqa: E501
        allowed_values = ["speed", "traff"]  # noqa: E501
        if consumption_type not in allowed_values:
            raise ValueError(
                "Invalid value for `consumption_type` ({0}), must be one of {1}"  # noqa: E501
                .format(consumption_type, allowed_values)
            )

        self._consumption_type = consumption_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrafficConsumptionMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
