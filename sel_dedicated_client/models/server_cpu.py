# coding: utf-8

"""
    Seido User REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.4.8
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ServerCPU(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'base_freq': 'float',
        'count': 'int',
        'cores_per_cpu': 'int'
    }

    attribute_map = {
        'name': 'name',
        'base_freq': 'base_freq',
        'count': 'count',
        'cores_per_cpu': 'cores_per_cpu'
    }

    def __init__(self, name=None, base_freq=None, count=None, cores_per_cpu=None):  # noqa: E501
        """ServerCPU - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._base_freq = None
        self._count = None
        self._cores_per_cpu = None
        self.discriminator = None

        self.name = name
        self.base_freq = base_freq
        self.count = count
        self.cores_per_cpu = cores_per_cpu

    @property
    def name(self):
        """Gets the name of this ServerCPU.  # noqa: E501


        :return: The name of this ServerCPU.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServerCPU.


        :param name: The name of this ServerCPU.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def base_freq(self):
        """Gets the base_freq of this ServerCPU.  # noqa: E501


        :return: The base_freq of this ServerCPU.  # noqa: E501
        :rtype: float
        """
        return self._base_freq

    @base_freq.setter
    def base_freq(self, base_freq):
        """Sets the base_freq of this ServerCPU.


        :param base_freq: The base_freq of this ServerCPU.  # noqa: E501
        :type: float
        """
        if base_freq is None:
            raise ValueError("Invalid value for `base_freq`, must not be `None`")  # noqa: E501

        self._base_freq = base_freq

    @property
    def count(self):
        """Gets the count of this ServerCPU.  # noqa: E501


        :return: The count of this ServerCPU.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ServerCPU.


        :param count: The count of this ServerCPU.  # noqa: E501
        :type: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count

    @property
    def cores_per_cpu(self):
        """Gets the cores_per_cpu of this ServerCPU.  # noqa: E501


        :return: The cores_per_cpu of this ServerCPU.  # noqa: E501
        :rtype: int
        """
        return self._cores_per_cpu

    @cores_per_cpu.setter
    def cores_per_cpu(self, cores_per_cpu):
        """Sets the cores_per_cpu of this ServerCPU.


        :param cores_per_cpu: The cores_per_cpu of this ServerCPU.  # noqa: E501
        :type: int
        """
        if cores_per_cpu is None:
            raise ValueError("Invalid value for `cores_per_cpu`, must not be `None`")  # noqa: E501

        self._cores_per_cpu = cores_per_cpu

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerCPU):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
