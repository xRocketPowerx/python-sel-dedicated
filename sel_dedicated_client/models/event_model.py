# coding: utf-8

"""
    Seido User REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.4.8
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EventModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user_id': 'int',
        'staff_id': 'int',
        'request_uuid': 'str',
        'item_uuid': 'str',
        'item_name': 'str',
        'action_name': 'str',
        'change_data': 'object'
    }

    attribute_map = {
        'user_id': 'user_id',
        'staff_id': 'staff_id',
        'request_uuid': 'request_uuid',
        'item_uuid': 'item_uuid',
        'item_name': 'item_name',
        'action_name': 'action_name',
        'change_data': 'change_data'
    }

    def __init__(self, user_id=None, staff_id=None, request_uuid=None, item_uuid=None, item_name=None, action_name=None, change_data=None):  # noqa: E501
        """EventModel - a model defined in OpenAPI"""  # noqa: E501

        self._user_id = None
        self._staff_id = None
        self._request_uuid = None
        self._item_uuid = None
        self._item_name = None
        self._action_name = None
        self._change_data = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if staff_id is not None:
            self.staff_id = staff_id
        if request_uuid is not None:
            self.request_uuid = request_uuid
        if item_uuid is not None:
            self.item_uuid = item_uuid
        if item_name is not None:
            self.item_name = item_name
        if action_name is not None:
            self.action_name = action_name
        if change_data is not None:
            self.change_data = change_data

    @property
    def user_id(self):
        """Gets the user_id of this EventModel.  # noqa: E501


        :return: The user_id of this EventModel.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this EventModel.


        :param user_id: The user_id of this EventModel.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def staff_id(self):
        """Gets the staff_id of this EventModel.  # noqa: E501


        :return: The staff_id of this EventModel.  # noqa: E501
        :rtype: int
        """
        return self._staff_id

    @staff_id.setter
    def staff_id(self, staff_id):
        """Sets the staff_id of this EventModel.


        :param staff_id: The staff_id of this EventModel.  # noqa: E501
        :type: int
        """

        self._staff_id = staff_id

    @property
    def request_uuid(self):
        """Gets the request_uuid of this EventModel.  # noqa: E501


        :return: The request_uuid of this EventModel.  # noqa: E501
        :rtype: str
        """
        return self._request_uuid

    @request_uuid.setter
    def request_uuid(self, request_uuid):
        """Sets the request_uuid of this EventModel.


        :param request_uuid: The request_uuid of this EventModel.  # noqa: E501
        :type: str
        """
        if request_uuid is not None and len(request_uuid) > 36:
            raise ValueError("Invalid value for `request_uuid`, length must be less than or equal to `36`")  # noqa: E501
        if request_uuid is not None and len(request_uuid) < 36:
            raise ValueError("Invalid value for `request_uuid`, length must be greater than or equal to `36`")  # noqa: E501

        self._request_uuid = request_uuid

    @property
    def item_uuid(self):
        """Gets the item_uuid of this EventModel.  # noqa: E501


        :return: The item_uuid of this EventModel.  # noqa: E501
        :rtype: str
        """
        return self._item_uuid

    @item_uuid.setter
    def item_uuid(self, item_uuid):
        """Sets the item_uuid of this EventModel.


        :param item_uuid: The item_uuid of this EventModel.  # noqa: E501
        :type: str
        """

        self._item_uuid = item_uuid

    @property
    def item_name(self):
        """Gets the item_name of this EventModel.  # noqa: E501


        :return: The item_name of this EventModel.  # noqa: E501
        :rtype: str
        """
        return self._item_name

    @item_name.setter
    def item_name(self, item_name):
        """Sets the item_name of this EventModel.


        :param item_name: The item_name of this EventModel.  # noqa: E501
        :type: str
        """

        self._item_name = item_name

    @property
    def action_name(self):
        """Gets the action_name of this EventModel.  # noqa: E501


        :return: The action_name of this EventModel.  # noqa: E501
        :rtype: str
        """
        return self._action_name

    @action_name.setter
    def action_name(self, action_name):
        """Sets the action_name of this EventModel.


        :param action_name: The action_name of this EventModel.  # noqa: E501
        :type: str
        """

        self._action_name = action_name

    @property
    def change_data(self):
        """Gets the change_data of this EventModel.  # noqa: E501


        :return: The change_data of this EventModel.  # noqa: E501
        :rtype: object
        """
        return self._change_data

    @change_data.setter
    def change_data(self, change_data):
        """Sets the change_data of this EventModel.


        :param change_data: The change_data of this EventModel.  # noqa: E501
        :type: object
        """

        self._change_data = change_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
